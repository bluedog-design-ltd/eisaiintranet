{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  node.bundle|clean_class,
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
  view_mode ? view_mode|clean_class,
  'clearfix',
] %}

{% if content.field_hero_version_headline_2|render|trim|striptags is not empty %}
  {% set thisTitle = content.field_hero_version_headline_2 %}
{% else %}
  {% set thisTitle = drupal_title() %}
{% endif %}

<section class="hero">
  <div class="container-fluid hero-container">

    {#
    * old: {{ file_url(node.field_hero_image.entity.fileuri) }}
    #}

    <div class="row content-hero-image" style="background-image:url('{{ hero_image }}')">
      <div class="container">

        <h1>{{ thisTitle }}</h1>
        {{ drupal_breadcrumb() }}
      </div>

    </div>

  </div>
</section>

<div class="container">

  <div class="row">


    <div class="col-sm-4">
      <div class="side-navigation">


        {% if parent_title %}
          <div class="link-button content-sibling-link parent"><a href="{{ parent_url }}">{{ parent_title }}</a></div>
        {% endif %}

        <!--{# <div class="link-button content-sibling-link parent"><a href="{{ path('entity.node.canonical', {'node':  node.field_parent_hub_page.0.target_id}) }}">{{ node.field_parent_hub_page.entity.title[0].value }}</a></div> #} -->
        {{ drupal_view('eisai_page_siblings', 'content_page_siblings_block', parent_id) }}

        {#
        {% else %}
          {{ drupal_view('eisai_page_siblings', 'content_page_siblings_block', node.field_parent_hub_page.0.target_id) }}
        <!--<h1>MENU PARENT</h1>--><div class="link-button content-sibling-link parent"><a href="#">{{ node.field_menu_parent.entity.title[0].value }}</a></div>
        {{ drupal_view('eisai_page_siblings', 'content_page_siblings_block', node.field_menu_parent.0.target_id) }}
        {% endif %}
          #}
      </div>

      <div class="side-shortcuts">
        <h3>{{ 'My shortcuts'|trans }}</h3>
        {{ drupal_view('my_shortcuts', 'my_shortcuts_block') }}

        {# cannot get this working {{ drupal_block('eisai_intranet_sideaddshortcut_block') }} #}

      </div>

    </div>

    <div class="col-sm-8">


      <article{{ attributes.addClass(classes) }}>

        {{ title_prefix }}
        {% if not page %}
          <h2{{ title_attributes }}>
            <a href="{{ url }}" rel="bookmark">{{ label }}</a>
          </h2>
        {% endif %}
        {{ title_suffix }}

        {% if display_submitted %}
          <footer>
            {{ author_picture }}
            <div{{ author_attributes.addClass('author') }}>
              {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
              {{ metadata }}
            </div>
          </footer>
        {% endif %}

        <div{{ content_attributes.addClass('content') }}>
          {{ content|without('field_hero_version_headline_2') }}
        </div>

      </article>


    </div>

  </div>

</div>

